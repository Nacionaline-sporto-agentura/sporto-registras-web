/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/counties/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search for counties with pagination using various filters
         * @description Search for counties with pagination using various filters such as county codes, feature IDs, name. Additionally, you can filter by GeoJson, EWKT geometry
         */
        post: operations["counties-search"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/counties/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get county by code
         * @description Retrieve a county by its unique code.
         */
        get: operations["counties-get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/counties/{code}/geometry": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get county with geometry by code
         * @description Retrieve a county along with its geometry by its unique code. Optionally specify the SRID for the geometry output.
         */
        get: operations["counties-get-with-geometry"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/municipalities/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search for municipalities with pagination using various filters
         * @description Search for municipalities with pagination using various filters such as municipality codes, feature IDs, name. Additionally, you can filter by GeoJson, EWKT geometry
         */
        post: operations["municipalities-search"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/municipalities/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get municipality by code
         * @description Retrieve a municipality by its unique code.
         */
        get: operations["municipalities-get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/municipalities/{code}/geometry": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get municipality with geometry by code
         * @description Retrieve a municipality along with its geometry by its unique code. Optionally specify the SRID for the geometry output.
         */
        get: operations["municipalities-get-with-geometry"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/elderships/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search for elderships with pagination using various filters
         * @description Search for elderships with pagination using various filters such as eldership codes, feature IDs, name. Additionally, you can filter by GeoJson, EWKT geometry
         */
        post: operations["elderships-search"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/elderships/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get eldership by code
         * @description Retrieve a eldership by its unique code.
         */
        get: operations["elderships-get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/elderships/{code}/geometry": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get eldership with geometry by code
         * @description Retrieve a eldership along with its geometry by its unique code. Optionally specify the SRID for the geometry output.
         */
        get: operations["elderships-get-with-geometry"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/residential-areas/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search for residential areas with pagination using various filters
         * @description Search for residential areas with pagination using various filters such as residential area codes, feature IDs, name. Additionally, you can filter by GeoJson, EWKT geometry
         */
        post: operations["residential-areas-search"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/residential-areas/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get residential area by code
         * @description Retrieve a residential area by its unique code.
         */
        get: operations["residential-areas-get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/residential-areas/{code}/geometry": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get residential area with geometry by code
         * @description Retrieve a residential area along with its geometry by its unique code. Optionally specify the SRID for the geometry output.
         */
        get: operations["residential-areas-get-with-geometry"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/streets/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search for streets with pagination using various filters
         * @description Search for streets with pagination using various filters such as street codes, feature IDs, name. Additionally, you can filter by GeoJson, EWKT geometry
         */
        post: operations["streets-search"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/streets/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get street by code
         * @description Retrieve a street by its unique code.
         */
        get: operations["streets-get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/streets/{code}/geometry": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get street with geometry by code
         * @description Retrieve a street along with its geometry by its unique code. Optionally specify the SRID for the geometry output.
         */
        get: operations["streets-get-with-geometry"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/addresses/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search for address with pagination using various filters
         * @description Search for addresses with pagination using various filters such as address codes, feature IDs, name. Additionally, you can filter by GeoJson, EWKT geometry
         */
        post: operations["addresses-search"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/addresses/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get address by code
         * @description Retrieve a address by its unique code.
         */
        get: operations["addresses-get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Perform a Health Check
         * @description Endpoint to perform a healthcheck on. This endpoint can primarily be used Docker
         *     to ensure a robust container orchestration and management is in place. Other
         *     services which rely on proper functioning of the API service will not deploy if this
         *     endpoint returns any other HTTP status code except 200 (OK).
         *     Returns:
         *         HealthCheck: Returns a JSON response with the health status
         */
        get: operations["get_health_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Address */
        Address: {
            /**
             * Code
             * @description Unique code of the address
             */
            code: number;
            /**
             * Feature Id
             * @description Feature ID of the address
             */
            feature_id: number;
            /**
             * Plot Or Building Number
             * @description Plot or building number of the address
             */
            plot_or_building_number: string;
            /**
             * Building Block Number
             * @description Plot or building number of the address
             */
            building_block_number: string | null;
            /**
             * Postal Code
             * @description Postal code of the address
             */
            postal_code: string;
            /** @description Point geometry of the address */
            geometry: components["schemas"]["Geometry"];
            /** @description Street information the address belongs to */
            street: components["schemas"]["FlatStreet"] | null;
            /** @description Residential area information the address belongs to */
            residential_area: components["schemas"]["FlatResidentialArea"] | null;
            /** @description Municipality information the address belongs to */
            municipality: components["schemas"]["Municipality"];
        };
        /** AddressesFilter */
        AddressesFilter: {
            /**
             * Codes
             * @description Filter by codes
             */
            codes?: number[] | null;
            /**
             * Feature Ids
             * @description Filter by feature IDs
             */
            feature_ids?: number[] | null;
        };
        /** AddressesSearchRequest */
        AddressesSearchRequest: {
            /** @description Filter by geometry */
            geometry?: components["schemas"]["GeometryFilter"] | null;
            /** @description Filter by counties */
            counties?: components["schemas"]["CountiesFilter"] | null;
            /** @description Filter by municipalities */
            municipalities?: components["schemas"]["MunicipalitiesFilter"] | null;
            /** @description Filter by residential areas */
            residential_areas?: components["schemas"]["ResidentialAreasFilter"] | null;
            /** @description Filter by streets */
            streets?: components["schemas"]["StreetsFilter"] | null;
            /** @description Filter by addresses */
            addresses?: components["schemas"]["AddressesFilter"] | null;
        };
        /** CountiesFilter */
        CountiesFilter: {
            /**
             * Codes
             * @description Filter by codes
             */
            codes?: number[] | null;
            /**
             * Feature Ids
             * @description Filter by feature IDs
             */
            feature_ids?: number[] | null;
            /** @description Filter by name */
            name?: components["schemas"]["StringFilter"] | null;
        };
        /** CountiesSearchRequest */
        CountiesSearchRequest: {
            /** @description Filter by geometry */
            geometry?: components["schemas"]["GeometryFilter"] | null;
            /** @description Filter by counties */
            counties?: components["schemas"]["CountiesFilter"] | null;
        };
        /** County */
        County: {
            /**
             * Code
             * @description Unique code of the county
             */
            code: number;
            /**
             * Name
             * @description Name of the county
             */
            name: string;
            /**
             * Feature Id
             * @description Feature ID of the county
             */
            feature_id: number;
            /**
             * Area Ha
             * @description Area of the county in hectares
             */
            area_ha: number;
        };
        /** CountyWithGeometry */
        CountyWithGeometry: {
            /**
             * Code
             * @description Unique code of the county
             */
            code: number;
            /**
             * Name
             * @description Name of the county
             */
            name: string;
            /**
             * Feature Id
             * @description Feature ID of the county
             */
            feature_id: number;
            /**
             * Area Ha
             * @description Area of the county in hectares
             */
            area_ha: number;
            /** @description Geometry information of the county */
            geometry: components["schemas"]["Geometry"];
        };
        /** Eldership */
        Eldership: {
            /**
             * Code
             * @description Unique code of the eldership
             */
            code: number;
            /**
             * Name
             * @description Name of the eldership
             */
            name: string;
            /**
             * Feature Id
             * @description Feature ID of the eldership
             */
            feature_id: number;
            /**
             * Area Ha
             * @description Area of the eldership in hectares
             */
            area_ha: number;
            /** @description Municipality information the eldership belongs to */
            municipality: components["schemas"]["Municipality"];
        };
        /** EldershipWithGeometry */
        EldershipWithGeometry: {
            /**
             * Code
             * @description Unique code of the eldership
             */
            code: number;
            /**
             * Name
             * @description Name of the eldership
             */
            name: string;
            /**
             * Feature Id
             * @description Feature ID of the eldership
             */
            feature_id: number;
            /**
             * Area Ha
             * @description Area of the eldership in hectares
             */
            area_ha: number;
            /** @description Municipality information the eldership belongs to */
            municipality: components["schemas"]["Municipality"];
            /** @description Geometry information of the eldership */
            geometry: components["schemas"]["Geometry"];
        };
        /** EldershipsFilter */
        EldershipsFilter: {
            /**
             * Codes
             * @description Filter by codes
             */
            codes?: number[] | null;
            /**
             * Feature Ids
             * @description Filter by feature IDs
             */
            feature_ids?: number[] | null;
            /** @description Filter by name */
            name?: components["schemas"]["StringFilter"] | null;
        };
        /** EldershipsSearchRequest */
        EldershipsSearchRequest: {
            /** @description Filter by geometry */
            geometry?: components["schemas"]["GeometryFilter"] | null;
            /** @description Filter by counties */
            counties?: components["schemas"]["CountiesFilter"] | null;
            /** @description Filter by municipalities */
            municipalities?: components["schemas"]["MunicipalitiesFilter"] | null;
            /** @description Filter by elderships */
            elderships?: components["schemas"]["EldershipsFilter"] | null;
        };
        /** FlatResidentialArea */
        FlatResidentialArea: {
            /**
             * Code
             * @description Unique code of the residential area
             */
            code: number;
            /**
             * Name
             * @description Name of the residential area
             */
            name: string;
            /**
             * Feature Id
             * @description Feature ID of the residential area
             */
            feature_id: number;
            /**
             * Area Ha
             * @description Area of the residential area in hectares
             */
            area_ha: number;
        };
        /** FlatStreet */
        FlatStreet: {
            /**
             * Code
             * @description Unique code of the street
             */
            code: number;
            /**
             * Name
             * @description Name of the street
             */
            name: string;
            /**
             * Full Name
             * @description The full name of the street, including its type
             */
            full_name: string;
            /**
             * Feature Id
             * @description Feature ID of the street
             */
            feature_id: number;
            /**
             * Length M
             * @description The total length of the street in meters
             */
            length_m: number;
        };
        /** Geometry */
        Geometry: {
            /**
             * Srid
             * @description Spatial Reference Identifier (SRID) for the geometry
             */
            srid: number;
            /**
             * Data
             * @description Geometry data in WKB (Well-Known Binary) format, represented as a hex string
             */
            data: string;
        };
        /** GeometryFilter */
        GeometryFilter: {
            /**
             * @description Defines method used for filtering geometries:
             *     - **`intersects`**: filter geometries that intersects any portion of space with the specified geometry.
             *     - **`contains`**: filter geometries that are completely within the specified geometry.
             * @default intersects
             */
            method: components["schemas"]["GeometryFilterMethod"];
            /**
             * Ewkb
             * @description Extended Well-Known Binary (EWKB) represented as a hex string for geometry filtering
             */
            ewkb?: string | null;
            /**
             * Ewkt
             * @description Extended Well-Known Text (EWKT) for geometry filtering
             */
            ewkt?: string | null;
            /**
             * Geojson
             * @description GeoJson for geometry filtering
             */
            geojson?: string | null;
        };
        /**
         * GeometryFilterMethod
         * @enum {string}
         */
        GeometryFilterMethod: "intersects" | "contains";
        /**
         * HTTPExceptionResponse
         * @example {
         *       "detail": "HTTPException raised."
         *     }
         */
        HTTPExceptionResponse: {
            /**
             * Detail
             * @description Detailed error message
             */
            detail: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * HealthCheck
         * @description Response model to validate and return when performing a health check.
         */
        HealthCheck: {
            /**
             * Healthy
             * @description Health status of the service
             */
            healthy: boolean;
        };
        /** MunicipalitiesFilter */
        MunicipalitiesFilter: {
            /**
             * Codes
             * @description Filter by codes
             */
            codes?: number[] | null;
            /**
             * Feature Ids
             * @description Filter by feature IDs
             */
            feature_ids?: number[] | null;
            /** @description Filter by name */
            name?: components["schemas"]["StringFilter"] | null;
        };
        /** MunicipalitiesSearchRequest */
        MunicipalitiesSearchRequest: {
            /** @description Filter by geometry */
            geometry?: components["schemas"]["GeometryFilter"] | null;
            /** @description Filter by counties */
            counties?: components["schemas"]["CountiesFilter"] | null;
            /** @description Filter by municipalities */
            municipalities?: components["schemas"]["MunicipalitiesFilter"] | null;
        };
        /** Municipality */
        Municipality: {
            /**
             * Code
             * @description Unique code of the municipality
             */
            code: number;
            /**
             * Name
             * @description Name of the municipality
             */
            name: string;
            /**
             * Feature Id
             * @description Feature ID of the municipality
             */
            feature_id: number;
            /**
             * Area Ha
             * @description Area of the municipality in hectares
             */
            area_ha: number;
            /** @description County information the municipality belongs to */
            county: components["schemas"]["County"];
        };
        /** MunicipalityWithGeometry */
        MunicipalityWithGeometry: {
            /**
             * Code
             * @description Unique code of the municipality
             */
            code: number;
            /**
             * Name
             * @description Name of the municipality
             */
            name: string;
            /**
             * Feature Id
             * @description Feature ID of the municipality
             */
            feature_id: number;
            /**
             * Area Ha
             * @description Area of the municipality in hectares
             */
            area_ha: number;
            /** @description County information the municipality belongs to */
            county: components["schemas"]["County"];
            /** @description Geometry information of the municipality */
            geometry: components["schemas"]["Geometry"];
        };
        /** Page[Address] */
        Page_Address_: {
            /** Items */
            items: components["schemas"]["Address"][];
            /** Total */
            total: number | null;
            /** Page */
            page: number | null;
            /** Size */
            size: number | null;
            /** Pages */
            pages?: number | null;
        };
        /** Page[County] */
        Page_County_: {
            /** Items */
            items: components["schemas"]["County"][];
            /** Total */
            total: number | null;
            /** Page */
            page: number | null;
            /** Size */
            size: number | null;
            /** Pages */
            pages?: number | null;
        };
        /** Page[Eldership] */
        Page_Eldership_: {
            /** Items */
            items: components["schemas"]["Eldership"][];
            /** Total */
            total: number | null;
            /** Page */
            page: number | null;
            /** Size */
            size: number | null;
            /** Pages */
            pages?: number | null;
        };
        /** Page[Municipality] */
        Page_Municipality_: {
            /** Items */
            items: components["schemas"]["Municipality"][];
            /** Total */
            total: number | null;
            /** Page */
            page: number | null;
            /** Size */
            size: number | null;
            /** Pages */
            pages?: number | null;
        };
        /** Page[ResidentialArea] */
        Page_ResidentialArea_: {
            /** Items */
            items: components["schemas"]["ResidentialArea"][];
            /** Total */
            total: number | null;
            /** Page */
            page: number | null;
            /** Size */
            size: number | null;
            /** Pages */
            pages?: number | null;
        };
        /** Page[Street] */
        Page_Street_: {
            /** Items */
            items: components["schemas"]["Street"][];
            /** Total */
            total: number | null;
            /** Page */
            page: number | null;
            /** Size */
            size: number | null;
            /** Pages */
            pages?: number | null;
        };
        /** ResidentialArea */
        ResidentialArea: {
            /**
             * Code
             * @description Unique code of the residential area
             */
            code: number;
            /**
             * Name
             * @description Name of the residential area
             */
            name: string;
            /**
             * Feature Id
             * @description Feature ID of the residential area
             */
            feature_id: number;
            /**
             * Area Ha
             * @description Area of the residential area in hectares
             */
            area_ha: number;
            /** @description Municipality information the residential area belongs to */
            municipality: components["schemas"]["Municipality"];
        };
        /** ResidentialAreaWithGeometry */
        ResidentialAreaWithGeometry: {
            /**
             * Code
             * @description Unique code of the residential area
             */
            code: number;
            /**
             * Name
             * @description Name of the residential area
             */
            name: string;
            /**
             * Feature Id
             * @description Feature ID of the residential area
             */
            feature_id: number;
            /**
             * Area Ha
             * @description Area of the residential area in hectares
             */
            area_ha: number;
            /** @description Municipality information the residential area belongs to */
            municipality: components["schemas"]["Municipality"];
            /** @description Geometry information of the residential area */
            geometry: components["schemas"]["Geometry"];
        };
        /** ResidentialAreasFilter */
        ResidentialAreasFilter: {
            /**
             * Codes
             * @description Filter by codes
             */
            codes?: number[] | null;
            /**
             * Feature Ids
             * @description Filter by feature IDs
             */
            feature_ids?: number[] | null;
            /** @description Filter by name */
            name?: components["schemas"]["StringFilter"] | null;
        };
        /** ResidentialAreasSearchRequest */
        ResidentialAreasSearchRequest: {
            /** @description Filter by geometry */
            geometry?: components["schemas"]["GeometryFilter"] | null;
            /** @description Filter by counties */
            counties?: components["schemas"]["CountiesFilter"] | null;
            /** @description Filter by municipalities */
            municipalities?: components["schemas"]["MunicipalitiesFilter"] | null;
            /** @description Filter by residential areas */
            residential_areas?: components["schemas"]["ResidentialAreasFilter"] | null;
        };
        /**
         * SearchSortBy
         * @enum {string}
         */
        SearchSortBy: "code" | "name" | "feature_id" | "area_ha";
        /**
         * SearchSortOrder
         * @enum {string}
         */
        SearchSortOrder: "asc" | "desc";
        /** Street */
        Street: {
            /**
             * Code
             * @description Unique code of the street
             */
            code: number;
            /**
             * Name
             * @description Name of the street
             */
            name: string;
            /**
             * Full Name
             * @description The full name of the street, including its type
             */
            full_name: string;
            /**
             * Feature Id
             * @description Feature ID of the street
             */
            feature_id: number;
            /**
             * Length M
             * @description The total length of the street in meters
             */
            length_m: number;
            /** @description Residential area information the street belongs to */
            residential_area: components["schemas"]["ResidentialArea"];
        };
        /** StreetWithGeometry */
        StreetWithGeometry: {
            /**
             * Code
             * @description Unique code of the street
             */
            code: number;
            /**
             * Name
             * @description Name of the street
             */
            name: string;
            /**
             * Full Name
             * @description The full name of the street, including its type
             */
            full_name: string;
            /**
             * Feature Id
             * @description Feature ID of the street
             */
            feature_id: number;
            /**
             * Length M
             * @description The total length of the street in meters
             */
            length_m: number;
            /** @description Residential area information the street belongs to */
            residential_area: components["schemas"]["ResidentialArea"];
            /** @description Line geometry information of the street */
            geometry: components["schemas"]["Geometry"];
        };
        /** StreetsFilter */
        StreetsFilter: {
            /**
             * Codes
             * @description Filter by codes
             */
            codes?: number[] | null;
            /**
             * Feature Ids
             * @description Filter by feature IDs
             */
            feature_ids?: number[] | null;
            /** @description Filter by name */
            name?: components["schemas"]["StringFilter"] | null;
        };
        /** StreetsSearchRequest */
        StreetsSearchRequest: {
            /** @description Filter by geometry */
            geometry?: components["schemas"]["GeometryFilter"] | null;
            /** @description Filter by counties */
            counties?: components["schemas"]["CountiesFilter"] | null;
            /** @description Filter by municipalities */
            municipalities?: components["schemas"]["MunicipalitiesFilter"] | null;
            /** @description Filter by residential areas */
            residential_areas?: components["schemas"]["ResidentialAreasFilter"] | null;
            /** @description Filter by streets */
            streets?: components["schemas"]["StreetsFilter"] | null;
        };
        /** StringFilter */
        StringFilter: {
            /**
             * Contains
             * @description Filter by containing a string (case insensitive)
             */
            contains?: string | null;
            /**
             * Starts
             * @description Filter by starting with a string (case insensitive)
             */
            starts?: string | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "counties-search": {
        parameters: {
            query?: {
                sort_by?: components["schemas"]["SearchSortBy"];
                sort_order?: components["schemas"]["SearchSortOrder"];
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CountiesSearchRequest"];
            };
        };
        responses: {
            /** @description A paginated list of counties matching the search criteria. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Page_County_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "counties-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The code of the county to retrieve
                 * @example 10
                 */
                code: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Details of the county with the specified code. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["County"];
                };
            };
            /** @description County not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPExceptionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "counties-get-with-geometry": {
        parameters: {
            query?: {
                /**
                 * @description A spatial reference identifier (SRID) for geometry output. For instance, 3346 is LKS, 4326 is for World Geodetic System 1984 (WGS 84).
                 * @example 4326
                 */
                srid?: number;
            };
            header?: never;
            path: {
                /**
                 * @description The code of the county to retrieve
                 * @example 10
                 */
                code: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Details of the county with the specified code, including its geometry. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CountyWithGeometry"];
                };
            };
            /** @description County not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPExceptionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "municipalities-search": {
        parameters: {
            query?: {
                sort_by?: components["schemas"]["SearchSortBy"];
                sort_order?: components["schemas"]["SearchSortOrder"];
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MunicipalitiesSearchRequest"];
            };
        };
        responses: {
            /** @description A paginated list of municipalities matching the search criteria. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Page_Municipality_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "municipalities-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The code of the municipality to retrieve
                 * @example 13
                 */
                code: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Details of the municipality with the specified code. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Municipality"];
                };
            };
            /** @description Municipality not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPExceptionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "municipalities-get-with-geometry": {
        parameters: {
            query?: {
                /**
                 * @description A spatial reference identifier (SRID) for geometry output. For instance, 3346 is LKS, 4326 is for World Geodetic System 1984 (WGS 84).
                 * @example 4326
                 */
                srid?: number;
            };
            header?: never;
            path: {
                /**
                 * @description The code of the municipality to retrieve
                 * @example 13
                 */
                code: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Details of the municipality with the specified code, including its geometry. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MunicipalityWithGeometry"];
                };
            };
            /** @description Municipality not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPExceptionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "elderships-search": {
        parameters: {
            query?: {
                sort_by?: components["schemas"]["SearchSortBy"];
                sort_order?: components["schemas"]["SearchSortOrder"];
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EldershipsSearchRequest"];
            };
        };
        responses: {
            /** @description A paginated list of elderships matching the search criteria. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Page_Eldership_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "elderships-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The code of the eldership to retrieve
                 * @example 1306
                 */
                code: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Details of the eldership with the specified code. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Eldership"];
                };
            };
            /** @description Eldership not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPExceptionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "elderships-get-with-geometry": {
        parameters: {
            query?: {
                /**
                 * @description A spatial reference identifier (SRID) for geometry output. For instance, 3346 is LKS, 4326 is for World Geodetic System 1984 (WGS 84).
                 * @example 4326
                 */
                srid?: number;
            };
            header?: never;
            path: {
                /**
                 * @description The code of the eldership to retrieve
                 * @example 1306
                 */
                code: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Details of the eldership with the specified code, including its geometry. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EldershipWithGeometry"];
                };
            };
            /** @description Eldership not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPExceptionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "residential-areas-search": {
        parameters: {
            query?: {
                sort_by?: components["schemas"]["SearchSortBy"];
                sort_order?: components["schemas"]["SearchSortOrder"];
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResidentialAreasSearchRequest"];
            };
        };
        responses: {
            /** @description A paginated list of residential areas matching the search criteria. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Page_ResidentialArea_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "residential-areas-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The code of the residential area to retrieve
                 * @example 31003
                 */
                code: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Details of the residential area with the specified code. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResidentialArea"];
                };
            };
            /** @description Residential area not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPExceptionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "residential-areas-get-with-geometry": {
        parameters: {
            query?: {
                /**
                 * @description A spatial reference identifier (SRID) for geometry output. For instance, 3346 is LKS, 4326 is for World Geodetic System 1984 (WGS 84).
                 * @example 4326
                 */
                srid?: number;
            };
            header?: never;
            path: {
                /**
                 * @description The code of the residential area to retrieve
                 * @example 31003
                 */
                code: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Details of the residential area with the specified code, including its geometry. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResidentialAreaWithGeometry"];
                };
            };
            /** @description Residential area not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPExceptionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "streets-search": {
        parameters: {
            query?: {
                sort_by?: components["schemas"]["SearchSortBy"];
                sort_order?: components["schemas"]["SearchSortOrder"];
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StreetsSearchRequest"];
            };
        };
        responses: {
            /** @description A paginated list of streets matching the search criteria. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Page_Street_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "streets-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The code of the street to retrieve
                 * @example 1453778
                 */
                code: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Details of the street with the specified code. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Street"];
                };
            };
            /** @description Street not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPExceptionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "streets-get-with-geometry": {
        parameters: {
            query?: {
                /**
                 * @description A spatial reference identifier (SRID) for geometry output. For instance, 3346 is LKS, 4326 is for World Geodetic System 1984 (WGS 84).
                 * @example 4326
                 */
                srid?: number;
            };
            header?: never;
            path: {
                /**
                 * @description The code of the street to retrieve
                 * @example 1453778
                 */
                code: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Details of the street with the specified code, including its geometry. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StreetWithGeometry"];
                };
            };
            /** @description Street not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPExceptionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "addresses-search": {
        parameters: {
            query?: {
                sort_by?: components["schemas"]["SearchSortBy"];
                sort_order?: components["schemas"]["SearchSortOrder"];
                /**
                 * @description A spatial reference identifier (SRID) for geometry output. For instance, 3346 is LKS, 4326 is for World Geodetic System 1984 (WGS 84).
                 * @example 4326
                 */
                srid?: number;
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddressesSearchRequest"];
            };
        };
        responses: {
            /** @description A paginated list of addresses matching the search criteria. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Page_Address_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "addresses-get": {
        parameters: {
            query?: {
                /**
                 * @description A spatial reference identifier (SRID) for geometry output. For instance, 3346 is LKS, 4326 is for World Geodetic System 1984 (WGS 84).
                 * @example 4326
                 */
                srid?: number;
            };
            header?: never;
            path: {
                /**
                 * @description The code of the address to retrieve
                 * @example 155218235
                 */
                code: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Details of the address with the specified code. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Address"];
                };
            };
            /** @description Address not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPExceptionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_health_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return HTTP Status Code 200 (OK) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthCheck"];
                };
            };
            /** @description Service Unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPExceptionResponse"];
                };
            };
        };
    };
}
